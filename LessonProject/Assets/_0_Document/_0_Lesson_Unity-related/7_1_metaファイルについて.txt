

1  metaファイルについて


・バージョン管理する際はこの.metaファイルも一緒に追加する。
(ここでmetaをコミットせずプッシュを行うと他の人全員がmetaを自動生成する惨事に成る。)



・Assetファイル（画像、スクリプト、シーン、プレハブなど）を操作したい時は、
　Unity上のprojectウィンドウから操作するべき。
(メタファイルの参照元のファイルがない場合、メタファイルは削除される。
 そのため、Finder(winの場合,Explorer)でメタファイルだけ残してファイルを更新することでファイルの上書きが可能。
 この用途以外(例えばアセットの移動、名前変更、削除など。)ではprojectビューからファイルを操作するべきである
(Projectビューではファイルを上書きできず、複製される。))





.metaファイルには、アセット（画像、スクリプト、シーン、プレハブなど）のグローバル一意識別子（GUID）（グローバルユニークID）と呼ばれる識別子
(Unityプロジェクトにおいて他者と絶対に重複しない。もし重複したGUIDが存在する場合、Unity側でGUIDの再生成が行われます。)
やアセットの関連情報が含まれています。
GUIDは、Unityのプロジェクト内でアセットを一意に特定するためのランダムな文字列です。
これにより、アセットの名前変更や移動などが行われても、プロジェクト内のリンクや参照が失われないようになります。


例えば、
アセットがどのシーンに使用されているかや、
どのアセットと関連しているかなどの情報が.metaファイルに記録されます。






2  まとめ

アセットの識別:
 例えば、アセットが.metaファイルでエディタ上で管理されるとき、GUIDはそのアセットを一意に識別します。
この情報はファイルのパスや名前に依存せず、アセットの実際の識別子となります。

プロジェクト内のリンクと参照: 
 Unityのプロジェクト内では、アセット同士やコンポーネント間でリンクや参照が行われます。
.metaファイル内のGUIDは、これらの参照関係を維持するのに役立てられます。

バージョン管理と整合性:
 プロジェクトをバージョン管理システムに統合する場合、.metaファイル内のGUIDはアセットの変更や移動を追跡し、整合性を保つのに役立てられます。








3  その他


Unityはフォルダに対しても一つのmetaファイルを生成する。
しかしGitでは中身が空のフォルダは管理の対象外とみなされる。
そのためGitでコミットする際に、フォルダは変更対象に入っていないけどmetaファイル変更対象に入っているという事態が発生する。
空のフォルダのmetaファイルはコミットしないよう気をつけるべき。(私は個人で資料を用意してるのであまり気にしてないが)



メタファイルはシーンの保存やプロジェクトの保存、Unity Editor終了のタイミングで上書き保存される。
なのでこれらを行っていない状態でエディタがクラッシュして落ちると.metaデータが古いままの可能性があるので注意




全てのAssetの設定がmetaファイルで保存されているわけではなく、
Prefabやシーンファイル(.unityファイル)などは直接ファイル側に保存される。
(完全に外からImportされたAsset(fbxなど)の設定はmetaに書き込まれ、
 Unity自身が生成したAsset(Prefabなど)は直接ファイルに書き込まれる)




