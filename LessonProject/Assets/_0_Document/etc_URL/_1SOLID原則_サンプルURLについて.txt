デザインパターン Unity公式例
https://github.com/Unity-Technologies/game-programming-patterns-demo


https://www.karvan1230.com/archive/2022/11
https://www.karvan1230.com/archive/2022/12



SOLID原則

1 SingleResponsibility：単一責任の原則 

「1つのクラスが受け持つ責任は1つだけ」という原則


入力を受け取る → PlayerInputクラス
移動する      → PlayerMovementクラス
音声を鳴らす   → PlayerAudioクラス

それぞれのクラスに分けて分担するように実装

「UnrefactoredPlayer」というクラスは
前述の三機能をすべて受け持ったクラスで、単一責任の原則に反する例






2 OpenClosed：開放閉鎖の原則

「拡張にはオープンで、変更にはクローズドであるべき」という原則


「AreaCalculator」クラスで円(Circle)と四角(Rectangle)それぞれの面積を計算


AreaCalculatorクラス内で円の面積計算の関数と四角の面積計算の関数をそれぞれ実装するのは開放閉鎖の原則に反する実装、として紹介されており、


開放閉鎖の原則に即した実装として以下のクラスが作成されています。

面積を計算する関数(CalculateArea)を持った抽象クラス：Shape
Shapeを継承した円の面積計算クラス：Circle
Shapeを継承した四角の面積計算クラス：Rectangle


これよりAreaCalculatorの面積計算関数(GetArea)では
抽象クラス(Shape)の面積計算関数(CalculateArea)をコールするだけとなります。
例えば三角の面積計算の機能を追加したい場合は、Shapeを継承した三角の面積計算クラスを追加するだけで機能を拡張することができます。




3  LiskovSubstitution：リスコフの置換原則 

「派生型（サブクラス）は、その基底型（スーパークラス）と置換可能でなければならない」という原則

この原則は、サブクラスとスーパークラスがエラーなしで同じ方法で使用できるように、一貫性を保つことが目的

以下の二つのスーパークラスがあるケースについて

◇RoadVehicle：
前進後退の機能インターフェース(IMovable)と左右旋回機能のインターフェース(ITurnable)を持つスーパークラス

◇RailVehicle：
前進後退の機能インターフェース(IMovable)だけを持つスーパークラス

RailVehicleを継承したサブクラスのTrainは
前進後退の機能のみを作り込みべきで、
左右旋回を機能を持つとスーパークラスRailVehicleの提供機能を超える(＝置き換え不可）ので原則に反します。



4 InterfaceSegregation：インターフェース分離の原則

「クライアントが使用しないメソッドへの依存を強制すべきではない」という原則

簡単に言うと無駄に不要なインターフェース作るな、という原則

汎用的なインターフェースを作っていろんなクラスで使用するよりも、
各クラスの要件に応じたインターフェースをそれぞれに特化して作るほうがよい


敵ユニットクラス　EnemyUnitには、
ダメージ処理用(IDamageable)、移動処理用(IMovable)、ステータス処理用(IUnitStats)のインターフェースを継承させいます。

一方、爆発物クラス　ExplodingBarrelには
ダメージ処理用(IDamageable)と爆発処理用(IExplodable)のインターフェースを継承させて、それぞの要件に応じたインターフェースを使っています。






5 DependencyInversion：依存性逆転の原則

「上位のモジュールは下位のモジュールに依存せず、
どちらのモジュールも「抽象」に依存すべき」という原則


importやuseしてモジュールを使う側が、依存する側です。
依存する側がモジュールを直接呼び出すのではなく、
抽象クラスやインターフェースを使い「抽象」に依存しましょうというのが、この原則



ドアクラス(Door)とトラップクラス(Trap)はどちらも
ISwitchableインターフェースを継承しており、

Switchクラスでは
アクティブ化(ドアオープン／トラップ作動)と
非アクティブ化(ドアクローズ／トラップ作動)の処理を
ISwitchableインターフェースを通して行います。

インターフェイスを導入することにより、
上位モジュール(Switch)は下位モジュール(Door/Trap)を直接呼び出さず(依存せず)処理を実装することができます。






